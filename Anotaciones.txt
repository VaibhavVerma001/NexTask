### Backend Folder and File Structure

**Folders:**

- **Src/Routes**: Definition of endpoints or routes that the frontend can request.
- **Src/Controllers**: Functions that are executed when visiting a URL.
- **Src/Models**: Database models where schemas are created.
- **Src/Middlewares**: Functions to protect routes, especially for authenticated users.
- **Src/Schemas**: Schemas for validating data.
- **Src/Libs**: Reusable code that can be imported multiple times.

**Files:**

- **App.js**: Backend Express configuration.
- **Db.js**: Database configuration.
- **Config.js**: File to create configurations that other files can import.
- **Index.js**: Application entry point.
- **./Models/User.model.js**: Specification of data to be stored in MongoDB.
- **./Routes/Auth.routes.js**: Routes related to authentication.
- **./Controllers/Auth.controller.js**: Functions related to authentication.
- **./Libs/Jwt.js**: Generates a JSON Web Token.
- **./Middlewares/ValidateToken.js**: Function to validate if the user is authenticated.
- **./Controllers/Tasks.controllers.js**: Functions to handle tasks.
- **./Models/Task.model.js**: Model for tasks.
- **./Schemas/Auth.schemas.js**: Schema for authentication.
- **./Middlewares/ValidatorMiddleware.js**: Middleware to validate with schemas.
- **./Schemas/Task.schema.js**: Schema for tasks.

### Important Notes

1. When importing files we create, we must include the extension (.js).
2. To avoid mixing frontend and backend routes, add '/api' to the backend routes in App.js.
3. Middlewares are functions that run before reaching a route.

### Modules Used

- **Nodemon**: To automate server restarts during development.
- **Morgan**: To log incoming requests to the backend in the console.
- **Mongoose**: To connect and model data in MongoDB.
- **Dotenv**: To import environment variables from a .env file.
- **Bcryptjs**: To encrypt passwords.
- **JsonWebToken**: To create session tokens.
- **Cookie-parser**: To convert cookies into JSON objects.
- **Zod**: To validate data against a schema.
- **Cors**: To easily configure CORS.

### Frontend Important Notes

1. To avoid CORS errors, a module must be installed in the backend.

### Modules Used

- **React-router-dom**: To create and manage routes.
- **React-hook-form**: To validate form data and handle state changes.
- **Axios**: Library for making HTTP requests.
- **Js-cookie**: To read cookies.
- **Dayjs**: To manipulate dates in various formats.

### Files

- **./Src/Api/auth.js**: To make authentication-related requests to the backend.
- **./Src/Context/AuthContext.jsx**: Context to store user authentication data.
- **./Src/Api/axios.js**: Configuration file for Axios.
- **./Src/Api/tasks.js**: To make task-related requests to the backend.